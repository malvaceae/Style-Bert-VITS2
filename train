#!/usr/bin/env python

import json
import subprocess
import sys
import traceback
from distutils.util import strtobool
from pathlib import Path

import yaml

from webui_train import preprocess_all

INPUT_DIR = "/opt/ml/input"
OUTPUT_DIR = "/opt/ml/output"
MODEL_DIR = "/opt/ml/model"

if __name__ == "__main__":
    try:
        with Path(INPUT_DIR, "config/hyperparameters.json").open() as f:
            hyperparameters = json.load(f)

        with Path(INPUT_DIR, "config/inputdataconfig.json").open() as f:
            inputdataconfig = json.load(f)

        subprocess.run(
            [
                sys.executable,
                "initialize.py",
                "--skip_jvnv",
            ],
            check=True,
        )

        with Path("configs/paths.yml").open(mode="w") as f:
            yaml.dump(
                {
                    "dataset_root": "Data",
                    "assets_root": MODEL_DIR,
                },
                f,
            )

        for model_name in inputdataconfig.keys():
            subprocess.run(
                [
                    sys.executable,
                    "slice.py",
                    "--input_dir",
                    Path(INPUT_DIR, "data", model_name),
                    "--output_dir",
                    Path("Data", model_name, "raw"),
                ],
                check=True,
            )

            subprocess.run(
                [
                    sys.executable,
                    "transcribe.py",
                    "--input_dir",
                    Path("Data", model_name, "raw"),
                    "--output_file",
                    Path("Data", model_name, "esd.list"),
                    "--speaker_name",
                    model_name,
                    "--compute_type",
                    "float16",
                ],
                check=True,
            )

            use_jp_extra, batch_size, epochs, save_every_steps, normalize, trim = (
                bool(strtobool(hyperparameters.get("use_jp_extra", "True"))),
                int(hyperparameters.get("batch_size", "4")),
                int(hyperparameters.get("epochs", "100")),
                int(hyperparameters.get("save_every_steps", "1000")),
                bool(strtobool(hyperparameters.get("normalize", "False"))),
                bool(strtobool(hyperparameters.get("trim", "False"))),
            )

            preprocess_all(
                model_name=model_name,
                batch_size=batch_size,
                epochs=epochs,
                save_every_steps=save_every_steps,
                num_processes=2,
                normalize=normalize,
                trim=trim,
                freeze_EN_bert=False,
                freeze_JP_bert=False,
                freeze_ZH_bert=False,
                freeze_style=False,
                use_jp_extra=use_jp_extra,
                val_per_lang=0,
                log_interval=200,
            )

            with Path("default_config.yml").open() as f:
                config = yaml.safe_load(f)

            config["model_name"] = model_name

            with Path("config.yml").open(mode="w") as f:
                yaml.dump(config, f, allow_unicode=True)

            subprocess.run(
                [
                    sys.executable,
                    "train_ms_jp_extra.py" if use_jp_extra else "train_ms.py",
                    "--config",
                    Path("Data", model_name, "config.json"),
                    "--model",
                    Path("Data", model_name),
                    "--assets_root",
                    MODEL_DIR,
                ],
                check=True,
            )
    except Exception as e:
        with Path(OUTPUT_DIR, "failure").open(mode="w") as f:
            f.write(str(e) + "\n" + traceback.format_exc())
        raise
